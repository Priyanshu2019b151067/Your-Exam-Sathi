package auth_main.models;

import java.math.BigInteger;
import java.time.LocalDate;
import java.util.UUID;

import org.springframework.data.annotation.Id;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Index;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToOne;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;




@Data
@NoArgsConstructor
@AllArgsConstructor
@Builder
@Entity
@Table(name = "user_tbl",
indexes = {
		@Index(name = "idx_username", columnList = "userName"),
        @Index(name = "idx_email", columnList = "email")
},	
uniqueConstraints = {
		@UniqueConstraint(columnNames = "userName"),
        @UniqueConstraint(columnNames = "email")
}
)
		
public class UserTbl {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
    @Column(columnDefinition = "BINARY(16)")
	private UUID id;
	
	@Column(nullable = false,unique= true)
	private String userName;
	
	@Column(nullable = false, unique = true)
    private String email;
	
	@Column(nullable = false)
	private String password;
	
	@Column(nullable = false)
	private String firstName;
	
	private String lastName;
	
	 @Column(nullable = false, unique = true)
	 private String phoneNumber;
	 
	 @Column(length = 512)
	 private String avatarUrl;
	 
	 @Column(nullable = false)
	 private boolean isVerified = false;
	 
	 @Column(nullable = false)
	 private boolean isPremium = false;
	 
	 @Enumerated(EnumType.STRING)
	 @Column(length = 20)
	 private Gender gender;
	 
	 @Column(name = "date_of_birth")
	 private LocalDate dateOfBirth;
	 
	 @OneToOne
	 @JoinColumn(name = "college_id")
	 private College college; // Foreign key to College

	 @OneToOne
	 @JoinColumn(name = "course_id")
	 private Course course;
}
